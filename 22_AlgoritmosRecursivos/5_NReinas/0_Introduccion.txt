

                        Problema de las N-Reinas

El Juego de colocar ocho reinas en un tablero de ajedrez sin que se ataque ataquen entre si es otro
de los ejemplos del uso de los metodos de busquedad exhaustiva, sistematica de los algoritmo de vuelta atras
El problema se plantea de la forma siguiente (Consiste en colocar 8 reinas en un tablero de ajedrez de tal manera
que ninguna reina se ataque o se amenaze con otra) esto se puede hacer con 8 reinas o N reinas en un tablero de 
NxN (Dependiendo de la dimencion del tablero seran las reinas que se tienen que colocar)

    * Dado un tablero de ajedrez (8x8 casillas) hay que situar ocho reinas de forma que ninguna de ellas pueda actuar
      ("Comer") a cualquiera de las otras

Una reina puede atacar en diferentes direcciones que son en columna, en fila y en diagonales, entonces ahi entra el sentido
de colocar N reinas de forma que niguna se ataque entre si.

En primer lugar conviene recordar que la reina puede moverse a lo largo de la columna, fila y diagonales donde se encuentra
Sin embargo es posible realizar una poda y reducir los movimientos de las reinas en el problema
(Tener un table de 8x8 con 64 casillas es un problema muy complejo por tener demasiadas casillas para pocas reinas, lo mejor es
reducir). 

Cada columna del tablero puede contener una y solo una reina, la razon es inmediata: si por ejemplo en una columna
se encuentra ya una reina y en esta columna se agrega otra reina entonces se atacan mutuamente
    
    Entonces de las NxN casillas que puede ocupar una reina (Es decir de la s64 casillas que puede ocupar), se limita su ubicacion
    a las 8 casillas de la columna en que se encuentra. Con esto estamos diciendo que ya no vamos a plantear el problema donde vamos
    a poner 8 reinas en 64 casillas sino que en cada columna debe de ir una reina (De esta forma acabamos de reducir nuestro problema)

Lo primero a considerar a la hora de aplicar el algoritmo de vuelta atras es la tarea basica (Solucion Parcial) que exhaustivamente se
va a realizar. La propia naturalez del problema de las 8 reinas determina que la tarea sea tantear si es posible ubicar la reina numero
"i" para lo que hay 8 alternativas correspondientes a las 8 filas

    Entonces tenemos una reina en una determinada columna, la tarea basica es averiguar que esta reina que pusimos va a tener 8 posibles
    movimientos (8 psibles casillas donde se puede mover), ademas como en cada columna va a ir una reina pero tambien hay 8 filas entonces
    la tarea ahora esta en averiguar en que fila vamos a poner cada reina

La Comprobacion de que una seleccion es valida se hace comprobando que en la fila selccionada y en las dos diagonales en que una reina
pueda atacar, no haya otra reina colocada anteriormente (Hay que tener en claro que la reina ataca en diferentes maneras y sabemos si la
seleccion de una nueva reina que queremos poner es valida cuando nos demos cuenta que la nueva reina que estamos poniendo no va a atacar
ni va a ser atacada por ninguna reina ya puesta anteriormente) 
    - Ahora como ya sabemos que en una columna solo puede haber una reina (No nos enfocamos en evaluar las columans) ahora revisamos si
        en toda la fila no hay alguna reina y ademas en los diagonales tampoco debe haber una reina con la que puede atacar
        Si esta condicional se cumple entonces podemos poner la reina en dicha posicion
        (Si en la fila y diagonales no hay otra reina que amenaze)

La segunda cuestion es analizar la vuelta atras. ¿Que ocurre si no se es capaz de colocar las 8 reinas? Se borra la ubicacion, la fila 
donde se ha colocado y se ensaya con la siguiente fila valida. La realizacion de cada tarea supone ampliar el numero de reinas colocadas
hasta llegar a la solucion completa o bien determinar que no es posible colocar la reina actual en las 8 posibles filas. Entonces en la 
vuelta atras se coloca la reina actual en otra fila valida para reforzar un nuevo tanteo
(Si ya tenemos colocadas 7 reinas de manera correcta pero nos falta la octava y esta siempre esta amenazada o amenaza a otra reina, estos
significa que alguna de las 7 reinas colocadas anteriormente esta mal colocada, entonces nos tenemos que dar vuelta atras y mover alguna 
otra reina que hayamos puesto anteriormente y luego continuar para ver si se puede poner las demas reinas para concluir si logramos el 
objetivo o el problema no se puede resolver)

Representacion del Problema

Debido a que el objetivo del problema es encontrar la fila en que se situa la reina de la columna "i" (En cada columna solo hay una reina
entonces hay que darnos cuenta en que fila debemos poner la reina), se define el arreglo entero "reinas[]" tal que cada elemento contiene
el indice de la fila donde se situa la reina. El numero de reina "i" es a su vez el indice de columna dentro  de la cual se puede colocar
entre los ochos posibles valores de fila (Con esto ya no vamos a trabajar con una matriz de 8x8 o NxN sino que vamos a trabajar con un 
arreglo que tendra 8 elementos en caso de representar un tablero de 8x8 y estos valores del arreglo sera igual a los iteradores de la 
columna del tablero porque cada una de las columnas representa una reina y Ademas los valor que tengamos dentro del arreglo seran el indice
de las filas donde vamos a colocar las reinas) todo el problema va a estar basado en el arreglo "reinas" los numeros que tengamos dentro del
arreglo seran los valores que nos de el algoritmo siendo la pocicion del arreglo el numero de la columna donde van

    Ejemplo:

            reinas[] = {0, 4, 7, 5, 2, 6, 1, 3}
                        0  1  2  3  4  5  6  7

            El orden en que estan las Reinas seria:
                - Columna 0 Fila 0
                - Columna 1 Fila 4
                - Columna 2 Fila 7
                - Columna 3 Fila 5
                - Columna 4 Fila 2
                - Columna 5 Fila 6
                - Columna 6 Fila 1
                - Columna 7 Fila 3

Algoritmo:
        // "i" -> Es el conteo de las reinas que vamos a ir poniendo (Cuando llamemos esta funcion su valor sera 0 porque desde ahi
        //          comenzaremos a contar hasta N) y aemas este sera el iterador del arreglo "reinas"
        // Solucion -> Cuando sea True significa que ya hemos puesto las N reinas en el tablero y con False es que faltan o no se soluciono
        void ponerReina(int i, bool &solucion){
            // Como va una reina por columna pero cada una de esas puede ir en 8 posibles filas
            // Este "k" es el que va a controlar en que Fila vamos a poner la reina (Nos dice en que fila poner la Reina)
            int k = 0; // Inicializar el contador de movimientos    
            solucion = false;

            do{
                // En el arreglo "reinas" va a estar anotados la solucion final
                // Aqui la Reina X la ponemos en Tal Fila
                reinas[i] = k; // Coloca y anota Reina "i" en la fila "k"     
                // Incrementamos porque puede que la reina que estemos colocando en dicha fila no este correcta en esa fila
                // entonces se incremente K para moveros a otra fila y asi vaya probando
                k++;   

                // El arreglo lo vamos a pasar una matriz y mostraremos que este mas visual
                mostrarTablero();
                cout<<endl;

                // Comprobamos si el movimiento que hicimos antes era valido
                // La reina que acabamos de poner en la pocicion "i" ¿Es valida?
                // si no se cumple entonces no la ponemos ahi, asi simplemente no entra al condicional y prueba con la siguiente fila 
                // pero si es valida la pocicion entramos al condicional
                if(valido(i)){// En esta funcion vamos a comprobar si la reina que pusimos nos se amenaza en su fila ni en sus diagonales
                    // Comprobamos si aun no hemos terminado de poner todas las reinas 
                    if(i < N-1){// Como el conteo lo empezmos desde 0 por eso se resta uno a N
                        ponerReina(i+1, solucion); // Aumentamos el conteo para poner la siguiente reina

                        // Aplicacion de la Vuelta Atras
                        // Si una reina se amenaza con alguna otra entonces la reina que pusimos en la fila "k" la quitamos y volvemos a probar
                        // en alguna otra fila donde se amenaze con alguna
                        if(!solucion){
                            reinas[i] = 0;
                        }
                    }else{
                        // Todas las reinas estan colocadas
                        solucion = true;
                    }
                }
            // Mientras no hayamos encontrado la solucion o sigua siendo Falso y admeas k sea menor al numero de N (Numero del tablero)
            }while(!solucion && k < N);
        }



