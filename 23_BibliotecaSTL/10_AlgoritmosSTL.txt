

Algoritmos:

Mezclando los contenedores e iteradores y algo mas, asi salen los algoritmos dentro de la STL

Como se menciono anteriormente existen una gran cantidad de algoritmos disponibles en la STL que puede
ser utilizados con los contenedores e iteradores que se explicaron hasta aqui

Hay algoritmos de ordenamiento, busquedad, mezcla, matematicos, etc. Estos algoritmos
no son otra cosa que funciones Template que operan sobre los contenedores a traves de
los iteradores de estos (Solo hay que mandar a llamar las funciones no programar todo)
y como son template pueden aplicarse a cualquier tipo de contenedor (Estos algoritmos 
estan dentro de una biblioteca)

Estructura General

Aqui veremos como es que van a funcionar estas funciones que vamos a ir llamando dentro de
los algoritmos de la STL. Para describir la estrutura general que poseen los algoritmos de
la biblioteca se utilizara un ejemplo:

    Esto es lo que tienen (Como ejemplo de Maximo nada mas) las funciones internamente que vamos a mandar a llamar:

        template<class T>
        T max(vector<T> &v){
            // Crear una variable para devolver el maximo
            T maximo = v[0];

            // Buscar el maximo
            for(int i=1; i<v.size(); i++){
                if(maximo < v[i]){
                    maximo = v[i];
                }
            }
            return maximo;
        }
    
    Esta funcion de aqui tiene desventajas (Cosa que no pasa en los algoritmos de la STL, estos
    si estan bien optimizados y mas completos)
    Entre las desventajas:
        Solo sirve para el contenedor de tipo vector no de otro
        Esta funcion nos saca el maximo de todos los elementos del vector, si queremos
            sacar solo de una rango especifico esto no nos sirve

    Para los algoritmos de STL mas o menos se programan de la siguiente manera

        // Crear un algoritmo generico para encontrar el maximo
        template<class iter>
        iter max(iter inicio, iter fin){
            // Crear una variable para devolver el maximo
            iter maximo = inicio;
            iter aux = inicio;

            // buscar el maximo
            while(aux != fin){
                if(*maximo < *aux){
                    maximo = aux;
                }
                aux++;
            }
            return maximo;
        }
    
    Esto nos sirve para cualquier tipo de contenedor y ademas para solo un rango especifico

Para usar estos algoritmos solo se tiene que importar la libreria pertinente y se manda a llamar la funcion
